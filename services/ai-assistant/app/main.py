import os
import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import asyncio

import google.generativeai as genai
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import httpx
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s'
)
log = logging.getLogger("ai-assistant")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="AI Security Assistant",
    description="AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–æ–º–∞–ª–∏–π",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini AI
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY environment variable is required")

genai.configure(api_key=GEMINI_API_KEY)

# –£–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
def generate_smart_template_response(prompt: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤"""
    prompt_lower = prompt.lower()
    
    # –ö–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if "–∑–∞–±–ª–æ–∫–∏—Ä—É–π" in prompt_lower or "–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" in prompt_lower or "–¥–æ–±–∞–≤—å –≤ —á–µ—Ä–Ω—ã–π" in prompt_lower:
        # –ò—â–µ–º IP –∞–¥—Ä–µ—Å –≤ –ø—Ä–æ–º–ø—Ç–µ
        import re
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
        ips = re.findall(ip_pattern, prompt)
        if ips:
            return json.dumps({
                "action": "block_ip",
                "ip": ips[0],
                "reason": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "message": f"IP –∞–¥—Ä–µ—Å {ips[0]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
            }, ensure_ascii=False)
    
    if "—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π" in prompt_lower or "—É–¥–∞–ª–∏ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ" in prompt_lower or "—É–±–µ—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É" in prompt_lower:
        import re
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
        ips = re.findall(ip_pattern, prompt)
        if ips:
            return json.dumps({
                "action": "unblock_ip",
                "ip": ips[0],
                "reason": "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "message": f"IP –∞–¥—Ä–µ—Å {ips[0]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            }, ensure_ascii=False)
    
    if "–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫" in prompt_lower or "whitelist" in prompt_lower:
        import re
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
        ips = re.findall(ip_pattern, prompt)
        if ips:
            return json.dumps({
                "action": "whitelist_ip",
                "ip": ips[0],
                "reason": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "message": f"IP –∞–¥—Ä–µ—Å {ips[0]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"
            }, ensure_ascii=False)
    
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if any(word in prompt_lower for word in ["—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç", "—Å—Ç–∞—Ç—É—Å", "–∫–∞–∫ –¥–µ–ª–∞", "–æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞"]):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
            if "–∞–Ω–æ–º–∞–ª–∏–π" in prompt and "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ip" in prompt.lower():
                lines = prompt.split('\n')
                anomalies_count = 0
                ips_count = 0
                for line in lines:
                    if "–í—Å–µ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π:" in line:
                        anomalies_count = int(line.split(':')[1].strip())
                    if "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö IP:" in line:
                        ips_count = int(line.split(':')[1].strip())
                
                if anomalies_count > 50:
                    return f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {anomalies_count} –∞–Ω–æ–º–∞–ª–∏–π! –≠—Ç–æ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç {ips_count} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø–∞—Å–Ω—ã–µ IP –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."
                elif anomalies_count > 20:
                    return f"üìä –¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {anomalies_count} –∞–Ω–æ–º–∞–ª–∏–π –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {ips_count} IP –∞–¥—Ä–µ—Å–æ–≤. –£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: —Å—Ä–µ–¥–Ω–∏–π. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
                else:
                    return f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {anomalies_count} –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π. –í—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º!"
        except:
            pass
        
        return "üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö IP –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏."
    
    # –ü–æ–º–æ—â—å
    if any(word in prompt_lower for word in ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ —É–º–µ–µ—à—å", "–∫–æ–º–∞–Ω–¥—ã"]):
        return """–Ø AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç SecureWatch. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üõ°Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏:**
- "–ó–∞–±–ª–æ–∫–∏—Ä—É–π IP 192.168.1.100" - –¥–æ–±–∞–≤–∏—Ç—å IP –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
- "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π IP 192.168.1.100" - —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞  
- "–î–æ–±–∞–≤—å IP 192.168.1.100 –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫" - –¥–æ–±–∞–≤–∏—Ç—å –≤ whitelist

üìä **–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
- "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?" - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- "–ü–æ–∫–∞–∂–∏ –∞–Ω–æ–º–∞–ª–∏–∏" - —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑
- "–ö–∞–∫–∏–µ IP —Å–∞–º—ã–µ –æ–ø–∞—Å–Ω—ã–µ?" - —Ç–æ–ø –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ!"""
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    return "–Ø AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç SecureWatch. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏ IP. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP –∞–¥—Ä–µ—Å. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ AI —Å fallback –º–æ–¥–µ–ª—è–º–∏
def generate_ai_response(prompt: str, user_message: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI —Å fallback –º–æ–¥–µ–ª—è–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
    models_to_try = [
        'gemini-1.5-flash-latest',
        'gemini-1.5-flash',
        'gemini-1.5-pro-latest',
        'gemini-1.5-pro',
        'gemini-pro',
        'gemini-1.0-pro',
    ]
    
    for model_name in models_to_try:
        try:
            log.info(f"Trying model: {model_name}")
            model = genai.GenerativeModel(model_name)
            response = model.generate_content(prompt)
            log.info(f"Successfully used model: {model_name}")
            return response.text
        except Exception as e:
            log.warning(f"Model {model_name} failed: {e}")
            continue
    
    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_message –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ prompt
    log.warning("All AI models failed, using smart templates")
    return generate_smart_template_response(user_message if user_message else prompt)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
ML_DETECTOR_URL = os.getenv("ML_DETECTOR_URL", "http://ml-detector:8000")

# Pydantic –º–æ–¥–µ–ª–∏
class AnomalyAnalysis(BaseModel):
    ip: str
    anomaly_score: float
    action: str
    reason: str
    timestamp: str
    recent_failed_attempts: int
    recent_total_events: int
    failure_ratio: float

class SecurityStatus(BaseModel):
    overall_status: str
    threat_level: str
    active_threats: int
    blocked_ips: int
    flagged_ips: int
    recommendations: List[str]
    last_analysis: str

class AttackAnalysis(BaseModel):
    attack_type: str
    severity: str
    description: str
    indicators: List[str]
    recommendations: List[str]
    confidence: float

class ChatMessage(BaseModel):
    message: str
    context: Optional[Dict[str, Any]] = None

class AIAssistant:
    def __init__(self):
        self.ml_detector_url = ML_DETECTOR_URL
        self.client = httpx.AsyncClient(timeout=30.0)
        
    async def get_anomalies(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –æ—Ç ML –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        try:
            response = await self.client.get(f"{self.ml_detector_url}/anomalies", params={"limit": limit})
            response.raise_for_status()
            data = response.json()
            return data.get("anomalies", [])
        except Exception as e:
            log.error(f"Failed to get anomalies: {e}")
            return []
    
    async def get_ips_summary(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ IP –∞–¥—Ä–µ—Å–∞–º"""
        try:
            response = await self.client.get(f"{self.ml_detector_url}/ips", params={"limit": limit})
            response.raise_for_status()
            data = response.json()
            return data.get("ips", [])
        except Exception as e:
            log.error(f"Failed to get IPs summary: {e}")
            return []
    
    async def get_allow_list(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        try:
            response = await self.client.get(f"{self.ml_detector_url}/lists/allow")
            response.raise_for_status()
            data = response.json()
            return data.get("items", [])
        except Exception as e:
            log.error(f"Failed to get allow list: {e}")
            return []
    
    async def get_deny_list(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        try:
            response = await self.client.get(f"{self.ml_detector_url}/lists/deny")
            response.raise_for_status()
            data = response.json()
            return data.get("items", [])
        except Exception as e:
            log.error(f"Failed to get deny list: {e}")
            return []
    
    async def add_to_blacklist(self, ip: str, description: str = "Blocked by AI Assistant") -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç IP –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        try:
            payload = {
                "type": "ip",
                "value": ip,
                "description": description
            }
            response = await self.client.post(f"{self.ml_detector_url}/lists/deny", json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            log.error(f"Failed to add {ip} to blacklist: {e}")
            raise
    
    async def remove_from_blacklist(self, ip: str) -> Dict:
        """–£–¥–∞–ª—è–µ—Ç IP –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            payload = {
                "item_type": "ip",
                "value": ip
            }
            response = await self.client.delete(f"{self.ml_detector_url}/lists/deny", json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            log.error(f"Failed to remove {ip} from blacklist: {e}")
            raise
    
    async def add_to_whitelist(self, ip: str, description: str = "Whitelisted by AI Assistant") -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç IP –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        try:
            payload = {
                "type": "ip",
                "value": ip,
                "description": description
            }
            response = await self.client.post(f"{self.ml_detector_url}/lists/allow", json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            log.error(f"Failed to add {ip} to whitelist: {e}")
            raise
    
    def analyze_anomalies_with_ai(self, anomalies: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ —Å –ø–æ–º–æ—â—å—é AI"""
        if not anomalies:
            return {
                "threat_level": "low",
                "active_threats": 0,
                "blocked_ips": 0,
                "flagged_ips": 0,
                "recommendations": ["No anomalies detected"],
                "analysis": "No security threats detected"
            }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
        anomalies_summary = []
        blocked_count = 0
        flagged_count = 0
        
        for anomaly in anomalies:
            if anomaly.get("action") == "block_ip":
                blocked_count += 1
            elif anomaly.get("action") == "flag_ip":
                flagged_count += 1
                
            anomalies_summary.append({
                "ip": anomaly.get("ip"),
                "action": anomaly.get("action"),
                "score": anomaly.get("iso_score"),
                "reason": anomaly.get("reason"),
                "failed_attempts": anomaly.get("recent_failed"),
                "total_events": anomaly.get("recent_events"),
                "failure_ratio": anomaly.get("recent_fail_ratio")
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        prompt = f"""
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑:

        –ê–Ω–æ–º–∞–ª–∏–∏:
        {json.dumps(anomalies_summary, indent=2, ensure_ascii=False)}

        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "threat_level": "low/medium/high/critical",
            "active_threats": —á–∏—Å–ª–æ,
            "blocked_ips": —á–∏—Å–ª–æ,
            "flagged_ips": —á–∏—Å–ª–æ,
            "attack_patterns": ["–ø–∞—Ç—Ç–µ—Ä–Ω1", "–ø–∞—Ç—Ç–µ—Ä–Ω2"],
            "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"],
            "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏"
        }}

        –£—á—Ç–∏:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö IP
        - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞—Ç–∞–∫ (brute force, DDoS, etc.)
        - –£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        
        try:
            response_text = generate_ai_response(prompt)
            ai_analysis = json.loads(response_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            ai_analysis.update({
                "blocked_ips": blocked_count,
                "flagged_ips": flagged_count,
                "active_threats": len(anomalies)
            })
            
            return ai_analysis
            
        except Exception as e:
            log.error(f"AI analysis failed: {e}")
            return {
                "threat_level": "medium",
                "active_threats": len(anomalies),
                "blocked_ips": blocked_count,
                "flagged_ips": flagged_count,
                "recommendations": ["Enable AI analysis for detailed insights"],
                "analysis": f"Detected {len(anomalies)} anomalies, {blocked_count} blocked, {flagged_count} flagged"
            }
    
    def analyze_specific_attack(self, anomaly: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞—Ç–∞–∫—É"""
        prompt = f"""
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∞–Ω–æ–º–∞–ª–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:

        IP: {anomaly.get('ip')}
        –î–µ–π—Å—Ç–≤–∏–µ: {anomaly.get('action')}
        –û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏: {anomaly.get('iso_score')}
        –ü—Ä–∏—á–∏–Ω–∞: {anomaly.get('reason')}
        –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏: {anomaly.get('recent_failed')}
        –û–±—â–∏–µ —Å–æ–±—ã—Ç–∏—è: {anomaly.get('recent_events')}
        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–µ—É–¥–∞—á: {anomaly.get('recent_fail_ratio')}

        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "attack_type": "—Ç–∏–ø –∞—Ç–∞–∫–∏",
            "severity": "low/medium/high/critical",
            "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ç–∞–∫–∏",
            "indicators": ["–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä1", "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä2"],
            "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"],
            "confidence": 0.0-1.0
        }}
        """
        
        try:
            response_text = generate_ai_response(prompt)
            return json.loads(response_text)
        except Exception as e:
            log.error(f"Attack analysis failed: {e}")
            return {
                "attack_type": "Unknown",
                "severity": "medium",
                "description": f"Anomaly detected: {anomaly.get('reason')}",
                "indicators": ["Unusual activity pattern"],
                "recommendations": ["Monitor this IP closely"],
                "confidence": 0.5
            }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
ai_assistant = AIAssistant()

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "ok",
        "service": "ai-assistant",
        "timestamp": datetime.now().isoformat(),
        "ml_detector_connected": True
    }

@app.get("/status")
async def get_security_status():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç ML –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        anomalies = await ai_assistant.get_anomalies(limit=100)
        allow_list = await ai_assistant.get_allow_list()
        deny_list = await ai_assistant.get_deny_list()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        ai_analysis = ai_assistant.analyze_anomalies_with_ai(anomalies)
        
        return SecurityStatus(
            overall_status="operational" if ai_analysis["threat_level"] in ["low", "medium"] else "threat_detected",
            threat_level=ai_analysis["threat_level"],
            active_threats=ai_analysis["active_threats"],
            blocked_ips=ai_analysis["blocked_ips"],
            flagged_ips=ai_analysis["flagged_ips"],
            recommendations=ai_analysis["recommendations"],
            last_analysis=datetime.now().isoformat()
        )
        
    except Exception as e:
        log.exception("Failed to get security status")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/analyze/{ip}")
async def analyze_ip(ip: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è IP
        anomalies = await ai_assistant.get_anomalies(limit=100)
        ip_anomalies = [a for a in anomalies if a.get("ip") == ip]
        
        if not ip_anomalies:
            return {
                "ip": ip,
                "status": "clean",
                "analysis": "No anomalies detected for this IP",
                "recommendations": ["Continue monitoring"]
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–Ω–æ–º–∞–ª–∏—é
        latest_anomaly = ip_anomalies[0]  # –°–∞–º—ã–µ –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        attack_analysis = ai_assistant.analyze_specific_attack(latest_anomaly)
        
        return {
            "ip": ip,
            "status": "threat_detected",
            "anomalies_count": len(ip_anomalies),
            "latest_anomaly": latest_anomaly,
            "attack_analysis": attack_analysis
        }
        
    except Exception as e:
        log.exception(f"Failed to analyze IP {ip}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/recommendations")
async def get_recommendations():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        anomalies = await ai_assistant.get_anomalies(limit=50)
        ai_analysis = ai_assistant.analyze_anomalies_with_ai(anomalies)
        
        return {
            "recommendations": ai_analysis["recommendations"],
            "threat_level": ai_analysis["threat_level"],
            "attack_patterns": ai_analysis.get("attack_patterns", []),
            "generated_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        log.exception("Failed to get recommendations")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/summary")
async def get_security_summary():
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        anomalies = await ai_assistant.get_anomalies(limit=20)
        ips_summary = await ai_assistant.get_ips_summary(limit=50)
        allow_list = await ai_assistant.get_allow_list()
        deny_list = await ai_assistant.get_deny_list()
        
        ai_analysis = ai_assistant.analyze_anomalies_with_ai(anomalies)
        
        return {
            "summary": {
                "total_anomalies": len(anomalies),
                "blocked_ips": ai_analysis["blocked_ips"],
                "flagged_ips": ai_analysis["flagged_ips"],
                "whitelist_size": len(allow_list),
                "blacklist_size": len(deny_list),
                "threat_level": ai_analysis["threat_level"]
            },
            "recent_anomalies": anomalies[:5],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
            "top_suspicious_ips": sorted(ips_summary, key=lambda x: x.get("recent_fail_ratio", 0), reverse=True)[:5],
            "ai_analysis": ai_analysis,
            "generated_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        log.exception("Failed to get security summary")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/chat")
async def chat_with_ai(chat_msg: ChatMessage):
    """–ß–∞—Ç —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏"""
    try:
        user_message = chat_msg.message
        log.info(f"Chat request: {user_message}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º—ã
        anomalies = await ai_assistant.get_anomalies(limit=20)
        ips_summary = await ai_assistant.get_ips_summary(limit=50)
        deny_list = await ai_assistant.get_deny_list()
        allow_list = await ai_assistant.get_allow_list()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_context = f"""
–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã SecureWatch. 

–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:
- –í—Å–µ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π: {len(anomalies)}
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö IP: {len(ips_summary)}
- –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: {len(deny_list)}
- –í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ: {len(allow_list)}

–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏:
{json.dumps(anomalies[:5], indent=2, ensure_ascii=False)}

–¢–æ–ø –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP:
{json.dumps(sorted(ips_summary, key=lambda x: x.get('recent_fail_ratio', 0), reverse=True)[:5], indent=2, ensure_ascii=False)}

–¢—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã:
1. "–∑–∞–±–ª–æ–∫–∏—Ä—É–π IP X.X.X.X" - –¥–æ–±–∞–≤–∏—Ç—å IP –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
2. "—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π IP X.X.X.X" - —É–¥–∞–ª–∏—Ç—å IP –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞  
3. "–¥–æ–±–∞–≤—å IP X.X.X.X –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫" - –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
4. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞–Ω–æ–º–∞–ª–∏—è—Ö, IP –∞–¥—Ä–µ—Å–∞—Ö

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP, –æ—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "action": "block_ip" | "unblock_ip" | "whitelist_ip",
    "ip": "X.X.X.X",
    "reason": "–ø—Ä–∏—á–∏–Ω–∞",
    "message": "—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
}}

–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini AI
        prompt = f"{system_context}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}\n\n–û—Ç–≤–µ—Ç:"
        
        ai_response = generate_ai_response(prompt, user_message).strip()
        
        log.info(f"AI response: {ai_response}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        action_taken = None
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (–∫–æ–º–∞–Ω–¥—É)
            if ai_response.startswith("{") and ai_response.endswith("}"):
                command = json.loads(ai_response)
                
                if command.get("action") == "block_ip":
                    ip = command.get("ip")
                    reason = command.get("reason", "Blocked by AI Assistant")
                    await ai_assistant.add_to_blacklist(ip, reason)
                    action_taken = f"‚úÖ IP {ip} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                    ai_response = command.get("message", action_taken)
                    
                elif command.get("action") == "unblock_ip":
                    ip = command.get("ip")
                    await ai_assistant.remove_from_blacklist(ip)
                    action_taken = f"‚úÖ IP {ip} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
                    ai_response = command.get("message", action_taken)
                    
                elif command.get("action") == "whitelist_ip":
                    ip = command.get("ip")
                    reason = command.get("reason", "Whitelisted by AI Assistant")
                    await ai_assistant.add_to_whitelist(ip, reason)
                    action_taken = f"‚úÖ IP {ip} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"
                    ai_response = command.get("message", action_taken)
        except:
            # –≠—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –∞ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            pass
        
        return {
            "response": ai_response,
            "action_taken": action_taken,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        log.exception("Chat failed")
        return {
            "response": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            "action_taken": None,
            "timestamp": datetime.now().isoformat()
        }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8002,
        log_level="info"
    )
